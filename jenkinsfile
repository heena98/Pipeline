pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    environment {
        PATH = "/opt/apache-maven-3.9.2/bin:/opt/sonar-scanner/bin:$PATH"
        MAVEN_OPTS = "-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"
        MAVEN_HOME = "/opt/apache-maven-3.9.2"
        JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
    }
    stages {
        stage('Build and Test') {
            parallel {
                stage('Build') {
                    steps {
                        script {
                            try {
                                sh 'mvn clean deploy -X'
                            } catch (Exception e) {
                                echo "Build failed. Check logs for details."
                                error("Maven build failed: ${e.message}")
                            }
                        }
                    }
                }
                stage('Run Tests') {
                    steps {
                        script {
                            try {
                                sh 'mvn test -Dsurefire.useFile=false'
                            } catch (Exception e) {
                                echo "Test execution failed. Check logs for details."
                                error("Tests failed: ${e.message}")
                            }
                        }
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    withCredentials([string(credentialsId: 'sonar-cred', variable: 'SONARQUBE_TOKEN')]) {
                        retry(3) {
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=dev01_ttrend -Dsonar.organization=dev01 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.ws.timeout=60"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            archiveArtifacts artifacts: '**/target/surefire-reports/*', allowEmptyArchive: true
            emailext(
                to: 'team@example.com',
                subject: "Build ${currentBuild.fullDisplayName}",
                body: "Build ${currentBuild.fullDisplayName} completed. Check the details at ${env.BUILD_URL}"
            )
        }
        failure {
            echo "Build failed. Check the logs for more details."
            emailext(
                to: 'team@example.com',
                subject: "Build ${currentBuild.fullDisplayName} Failed",
                body: "Build ${currentBuild.fullDisplayName} failed. Check the details at ${env.BUILD_URL}"
            )
        }
    }
}