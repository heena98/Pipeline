pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    environment {
        PATH = "/opt/apache-maven-3.9.2/bin:$PATH"
        MAVEN_OPTS = "-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"  // Prevent memory issues
    }
    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn clean deploy -X'  // Enabling debug mode for Maven
                    } catch (Exception e) {
                        echo "Build failed. Check logs for details."
                        error("Maven build failed: ${e.message}")
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh 'mvn test -Dsurefire.useFile=false'  // Prevents Surefire plugin fork issues
                    } catch (Exception e) {
                        echo "Test execution failed. Check logs for details."
                        error("Tests failed: ${e.message}")
                    }
                }
            }
        }
         stage('SonarQube analysis') {
            environment{
                scannerHome = tool 'sonar-scanner'

            }
//    def scannerHome = tool 'SonarScanner 4.0';
        steps{
        withSonarQubeEnv('ttrend-sonarqube-server') { 
        // If you have configured more than one global server connection, you can specify its name
        sh "${scannerHome}/bin/sonar-scanner"
       // sh "mvn sonar:sonar"
    }
        }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            archiveArtifacts artifacts: '**/target/surefire-reports/*', allowEmptyArchive: true  // Save test reports
        }
        failure {
            echo "Build failed. Check the logs for more details."
        }
    }
}
